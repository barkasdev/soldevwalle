import initWasmModule,{init_wasm,report_state,get_wallets,get_networks_async,set_active_network,send_sol,request_airdrop}from"./wasm/wasm_mod.js";let storedNetworks=[],storedWallets=[];async function fetchNetworks(){try{const e=await get_networks_async();storedNetworks=e,console.log("Background - Stored Networks:",storedNetworks)}catch(e){console.error("Error fetching networks:",e),storedNetworks=[]}}async function fetchWallets(){try{const e=await get_wallets();storedWallets=e,console.log("Background - Stored Wallets:",storedWallets)}catch(e){console.error("Error fetching wallets:",e),storedWallets=[]}}(async()=>{await initWasmModule(),console.log("wasm initialized"),await init_wasm("test-password"),await report_state("wasm initialized"),chrome.runtime.onMessage.addListener(((e,s,o)=>((async()=>{switch(e.type){case"GET_NETWORKS":try{const e=await get_networks_async();console.log("Background - Fetched Networks:",e),o({networks:e})}catch(s){console.error("GET_NETWORKS error:",s),o({success:!1,message:"Failed to fetch networks",error:s})}break;case"GET_WALLETS":try{const e=await get_wallets();console.log("Background - Fetched Wallets:",e),o({wallets:e})}catch(s){console.error("GET_WALLETS error:",s),o({success:!1,message:"Failed to fetch wallets",error:s})}break;case"SET_NETWORK":try{const s=e.networkName;console.log("Background - Calling set_active_network for:",s);const t=await set_active_network(s);storedNetworks=storedNetworks.map((e=>({...e,active:e.name===s}))),console.log("WASM set_active_network success:",t),o({success:!0,message:"Network updated",result:t})}catch(s){console.error("WASM set_active_network error:",s),o({success:!1,message:"Failed to update network",error:s})}break;case"REQUEST_AIRDROP":try{const{to_pubkey:s,amount:t}=e;console.log(`Requesting airdrop to ${s} with ${t} SOL`);const r=await request_airdrop(s,t);console.log("Airdrop success:",r),o({success:!0,message:"Airdrop requested",result:r})}catch(s){console.error("Airdrop error:",s),o({success:!1,message:"Airdrop failed",error:s})}break;case"SEND_SOL":try{const{from_pubkey:s,to_pubkey:t,amount:r,wallet_store_password:a}=e;console.log(`Sending ${r} SOL from ${s} to ${t}`);const c=await send_sol(s,t,r,a);console.log("SEND_SOL success:",c),o({success:!0,message:"Transaction complete",result:c})}catch(s){console.error("SEND_SOL error:",s),o({success:!1,message:"Transaction failed",error:s})}break;default:console.warn("Unknown request type:",e.type),o({success:!1,message:"Unknown request type"})}})(),!0))),chrome.tabs.query({active:!0,currentWindow:!0},(e=>{if(e.length>0){const s=e[0].url;console.log("Current tab URL:",s)}else console.log("No active tab found.")})),console.log("The networks are:",storedNetworks),console.log("The wallets are:",storedWallets)})();