// A static import is required in b/g scripts because they are executed in their own env
// not connected to the content scripts where wasm is loaded automatically
import initWasmModule, {get_wallets} from './wasm/wasm_mod.js';
import {init_wasm, report_state, set_active_network, get_networks_async} from './wasm/wasm_mod.js';


console.log("Background script started");
// console.log(await chrome.permissions.getAll());




// run the wasm initializer before calling wasm methods
// the initializer is generated by wasm_pack
(async () => {
    console.log("initWasmModule start");
    await initWasmModule();
    console.log("initWasmModule success");

    await init_wasm("test-password");
    console.log("initWasmModule done");
    // let nas = await get_networks_async();
    // console.log("nas", nas);
    console.log("123");
    let wallets = await get_wallets();
    console.log("wallets", wallets);
    await set_active_network("TESTNET");
    let nas = await get_networks_async();
    console.log("nas", nas);
    console.log("234");
    await report_state("wasm initialized");
})();

// A placeholder for OnSuccess in .then
function onSuccess(message) {
    // console.log(`Send OK: ${JSON.stringify(message)}`);
}

// A placeholder for OnError in .then
function onError(error) {
    console.error(`Promise error: ${error}`);
}

// A placeholder for OnError in .then
function onErrorWithLog(error) {
    console.error(`Promise error: ${error}`);
}

// Popup button handler
chrome.runtime.onMessage.addListener(async (request, sender, sendResponse) => {
    console.log(`Popup message received: ${JSON.stringify(request)}, ${JSON.stringify(sender)}`);

    // call the WASM code



        // call WASM
        report_state(JSON.stringify(request))
            .catch((e) => {
                console.error(e);
                chrome.runtime.sendMessage(JSON.stringify(e)).then(onSuccess, onError);
            })
            .finally(() => {
                // reset WASM, log to inactive
            })
});



onmessage = e => {
    const message = e.data
    console.log(`background.js: ${message}`);
}



